buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
          logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
          maven { url 'https://dl.bintray.com/alphagov/maven-test' }
          jcenter()
        }
        else {
          maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
        }
    }
    dependencies {
        classpath 'com.github.spullara.mustache.java:compiler:0.8.10',
                'org.yaml:snakeyaml:1.10',
                'uk.gov.ida:ida-gradle:1.1.0-23',
                'com.google.guava:guava:14.0.1',
                'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply from: 'idea.gradle'
apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'

ext {
    opensaml_version = '3.3.0'
    dropwizard_version = '1.3.5'
    build_version = "$opensaml_version-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
}

def dependencyVersions = [
            ida_utils:'345',
            dropwizard:"$dropwizard_version",
            dropwizard_infinispan:"$dropwizard_version-47",
            pact:'3.5.6',
            ida_test_utils:"2.0.0-44",
            opensaml:"$opensaml_version",
            dev_pki: '1.1.0-34',
            saml_libs:"$opensaml_version-159",
        ]

subprojects {
    apply plugin: 'java'

    group = "uk.gov.ida"
    version = "0.1.$version"

    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
          logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
          maven { url 'https://dl.bintray.com/alphagov/maven' } // For dropwizard-logstash
          maven { url 'https://dl.bintray.com/alphagov/maven-test' } // For other public verify binaries
          jcenter()
        }
        else {
          maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
        }
    }

    configurations.all {
        resolutionStrategy {
            // dropwizard-testing uses 2.2.0 but our libraries currently only work with 1.6.0.
            force 'org.assertj:assertj-core:1.6.0',
                    'org.glassfish.hk2:hk2-api:2.4.0-b31',
                    'org.glassfish.hk2:hk2-locator:2.4.0-b31',
                    'org.glassfish.hk2.external:javax.inject:2.4.0-b31',
                    'com.hubspot.dropwizard:dropwizard-guicier:0.9.1.0'
        }
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    configurations {
        all*.exclude group: 'org.mockito', module: 'mockito-all'
        common
        dropwizard
        msa
        saml
        saml_test
        pact_test
        soap
        test_deps_compile
        test_deps_runtime
        dropwizard_infinispan
        integrationtests
        config
        verify_event_emitter
        ida_utils
        ida_test_utils
        dev_pki
        trust_anchor
        saml_libs
    }

    dependencies {

        common 'joda-time:joda-time:2.3',
                'com.google.inject:guice:4.0'

        dropwizard 'io.dropwizard:dropwizard-core:' + dependencyVersions.dropwizard,
                'io.dropwizard:dropwizard-client:' + dependencyVersions.dropwizard,
                'io.dropwizard:dropwizard-auth:' + dependencyVersions.dropwizard,
                'io.dropwizard:dropwizard-configuration:' + dependencyVersions.dropwizard,
                'io.dropwizard:dropwizard-metrics-graphite:' + dependencyVersions.dropwizard,
                'com.hubspot.dropwizard:dropwizard-guicier:1.0.0.6',
                'org.reflections:reflections:0.9.10',
                'com.tradier:dropwizard-raven:1.0.0-1'

        config 'commons-io:commons-io:2.1'

        verify_event_emitter "uk.gov.ida:verify-event-emitter:0.0.1-53"

        ida_utils "uk.gov.ida:common-utils:2.0.0-$dependencyVersions.ida_utils",
                "uk.gov.ida:security-utils:2.0.0-$dependencyVersions.ida_utils",
                "uk.gov.ida:rest-utils:2.0.0-$dependencyVersions.ida_utils"

        ida_test_utils "uk.gov.ida:common-test-utils:$dependencyVersions.ida_test_utils"

        dev_pki "uk.gov.ida:ida-dev-pki:$dependencyVersions.dev_pki"

        dropwizard_infinispan "uk.gov.ida:dropwizard-infinispan:$dependencyVersions.dropwizard_infinispan"

        saml "org.opensaml:opensaml-core:$dependencyVersions.opensaml",
             "uk.gov.ida:saml-metadata-bindings:$dependencyVersions.saml_libs",
             project(":hub-saml")

        trust_anchor "uk.gov.ida.eidas:trust-anchor:1.0-31"

        saml_test project(":hub-saml-test-utils")

        saml_libs "uk.gov.ida:saml-utils:$dependencyVersions.saml_libs",
                "uk.gov.ida:saml-extensions:$dependencyVersions.saml_libs"

        pact_test "au.com.dius:pact-jvm-consumer-junit_2.11:$dependencyVersions.pact",
                "au.com.dius:pact-jvm-consumer_2.11:$dependencyVersions.pact",
                "au.com.dius:pact-jvm-model:$dependencyVersions.pact"
        pact_test("au.com.dius:pact-jvm-provider-junit_2.11:$dependencyVersions.pact") {
            exclude group: 'com.google.guava', module: 'guava'
        }

        def test_deps_deps = [
                'junit:junit:4.11',
                'org.assertj:assertj-core:1.6.0',
                'org.assertj:assertj-joda-time:1.1.0',
                'org.assertj:assertj-guava:1.1.0',
                'org.mockito:mockito-core:1.9.5',
                'org.json:json:20170516',
                'com.jayway.awaitility:awaitility:1.6.0',
                'com.github.tomakehurst:wiremock:2.16.0',
                "uk.gov.ida:saml-metadata-bindings-test:$dependencyVersions.saml_libs",
                'io.dropwizard:dropwizard-testing:' + dependencyVersions.dropwizard]

        test_deps_deps.each { dep ->
            test_deps_runtime(dep)
            test_deps_compile(dep) { transitive = false }
        }

        soap('org.apache.ws.commons:ws-commons-util:1.0.1') { transitive = false }
    }
}

task(outputDependencies) doLast {
    println "hub_saml="+dependencyVersions.hub_saml
    println "saml_metadata="+dependencyVersions.saml_metadata
    println "rest_utils="+dependencyVersions.rest_utils
    println "ida_utils="+dependencyVersions.ida_utils
    println "dropwizard_infinispan="+dependencyVersions.dropwizard_infinispan
}

import javax.crypto.Cipher
task(checkJceInstalled) doLast {
  if (Cipher.getMaxAllowedKeyLength('AES') <= 128) {
    throw new GradleException("""ERROR: You need to have the unlimited strength JCE installed.

See http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html

+Note this is installed by default in Java 8 1.6.1 or later""")
  }
}

defaultTasks 'clean', 'test', 'jar'
