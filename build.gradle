buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases' }
            mavenCentral()
        } else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }
    dependencies {
        classpath 'com.github.spullara.mustache.java:compiler:0.8.10',
                'org.yaml:snakeyaml:1.10',
                'uk.gov.ida:verify-gradle:2.0.0-36',
                'com.google.guava:guava:23.0'
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

ext {
    opensaml_version = '3.4.6'
    dropwizard_version = '2.0.21'
    build_version = "$opensaml_version-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
}

allprojects {
    apply plugin: 'java'
    group = "uk.gov.ida"
    version = "$build_version"
}

apply from: 'idea.gradle'
apply from: 'publish.gradle'

repositories {
    mavenCentral()
}

def dependencyVersions = [
        ida_utils:'397',
        dropwizard:"$dropwizard_version",
        ida_test_utils:"2.0.0-66",
        opensaml:"$opensaml_version",
        dev_pki: '2.0.0-46',
        saml_lib:"$opensaml_version-259",
        glassfish_version:'2.6.1',
        glassfish_jersey_version:'2.34'
]

subprojects {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            mavenCentral()
        } else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }

    configurations {
        common
        dropwizard
        msa
        saml
        saml_test
        soap
        test_utils
        test_deps_compile
        test_deps_runtime
        integrationtests
        config
        verify_event_emitter
        ida_utils
        dev_pki
        saml_lib
        prometheus
        redis
        redis_test
        awssdk
        s3mock
    }

    configurations.all {
        resolutionStrategy {
            force "ch.qos.logback:logback-classic:1.2.9"
            force "ch.qos.logback:logback-access:1.2.11"
        }
    }

    dependencies {
        common 'joda-time:joda-time:2.3',
                'com.google.inject:guice:5.0.1',
                "javax.xml.bind:jaxb-api:2.3.1",
                "com.sun.xml.bind:jaxb-core:2.3.0.1",
                "com.sun.xml.bind:jaxb-impl:2.3.0.1",
                "org.glassfish.jersey.media:jersey-media-jaxb:2.33"

        dropwizard "io.dropwizard:dropwizard-core:$dependencyVersions.dropwizard",
                "io.dropwizard:dropwizard-client:$dependencyVersions.dropwizard",
                "io.dropwizard:dropwizard-auth:$dependencyVersions.dropwizard",
                "io.dropwizard:dropwizard-configuration:$dependencyVersions.dropwizard",
                "io.dropwizard:dropwizard-metrics-graphite:$dependencyVersions.dropwizard",
                'org.dhatim:dropwizard-sentry:2.0.20',
                'com.google.inject.extensions:guice-servlet:5.0.1',
                "org.glassfish.hk2:guice-bridge:$dependencyVersions.glassfish_version",
                "org.glassfish.jersey.inject:jersey-hk2:$dependencyVersions.glassfish_jersey_version",
                "org.glassfish.jersey.core:jersey-client:$dependencyVersions.glassfish_jersey_version",
                "org.glassfish.jersey.core:jersey-server:$dependencyVersions.glassfish_jersey_version",
                'org.reflections:reflections:0.9.12'


        config 'commons-io:commons-io:2.1'

        verify_event_emitter "uk.gov.ida:verify-event-emitter:2.0.0-84"

        ida_utils "uk.gov.ida:common-utils:2.0.0-$dependencyVersions.ida_utils",
                "uk.gov.ida:security-utils:2.0.0-$dependencyVersions.ida_utils",
                "uk.gov.ida:rest-utils:2.0.0-$dependencyVersions.ida_utils"

        dev_pki "uk.gov.ida:verify-dev-pki:$dependencyVersions.dev_pki"

        prometheus 'uk.gov.ida:gds-metrics-dropwizard:0.7.0-3'

        saml "org.opensaml:opensaml-core:$dependencyVersions.opensaml",
                project(":hub-saml")

        saml_lib "uk.gov.ida:saml-lib:$dependencyVersions.saml_lib"

        saml_test "uk.gov.ida:saml-test:$dependencyVersions.saml_lib"

        test_utils "io.dropwizard:dropwizard-testing:$dependencyVersions.dropwizard",
                "org.junit.jupiter:junit-jupiter-api:5.5.2",
                "org.mockito:mockito-junit-jupiter:3.2.0",
                'org.assertj:assertj-core:3.14.0',
                'commons-io:commons-io:2.5'

        def test_deps_deps = [
                'org.json:json:20170516',
                'com.jayway.awaitility:awaitility:1.6.0',
                'com.github.tomakehurst:wiremock-standalone:2.23.2',
                "uk.gov.ida:saml-test:$dependencyVersions.saml_lib",
                "uk.gov.ida:common-test-utils:$dependencyVersions.ida_test_utils",
                "org.glassfish.jersey.media:jersey-media-jaxb:2.33"
        ]

        test_deps_deps.each { dep ->
            test_deps_runtime(dep)
            test_deps_compile(dep) { transitive = false }
        }

        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

        soap('org.apache.ws.commons:ws-commons-util:1.0.1') { transitive = false }

        redis('io.lettuce:lettuce-core:5.1.4.RELEASE')
        redis_test('com.github.kstyrc:embedded-redis:0.6')

        awssdk 'com.amazonaws:aws-java-sdk-s3:1.11.563'

        s3mock 'com.adobe.testing:s3mock-junit5:2.1.29'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntimeClasspath.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task(outputDependencies) doLast {
    println "hub_saml="+dependencyVersions.hub_saml
    println "saml_metadata="+dependencyVersions.saml_metadata
    println "rest_utils="+dependencyVersions.rest_utils
    println "ida_utils="+dependencyVersions.ida_utils
}

import javax.crypto.Cipher

task(checkJceInstalled) doLast {
    if (Cipher.getMaxAllowedKeyLength('AES') <= 128) {
        throw new GradleException("""ERROR: You need to have the unlimited strength JCE installed.

See http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html

+Note this is installed by default in Java 8 1.6.1 or later""")
    }
}

defaultTasks 'clean', 'test', 'jar'
